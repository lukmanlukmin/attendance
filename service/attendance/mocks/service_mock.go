// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	payload "attendance/model/payload"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAttendance is a mock of IAttendance interface.
type MockIAttendance struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendanceMockRecorder
}

// MockIAttendanceMockRecorder is the mock recorder for MockIAttendance.
type MockIAttendanceMockRecorder struct {
	mock *MockIAttendance
}

// NewMockIAttendance creates a new mock instance.
func NewMockIAttendance(ctrl *gomock.Controller) *MockIAttendance {
	mock := &MockIAttendance{ctrl: ctrl}
	mock.recorder = &MockIAttendanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendance) EXPECT() *MockIAttendanceMockRecorder {
	return m.recorder
}

// SubmitAttendance mocks base method.
func (m *MockIAttendance) SubmitAttendance(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockIAttendanceMockRecorder) SubmitAttendance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockIAttendance)(nil).SubmitAttendance), ctx)
}

// SubmitOvertime mocks base method.
func (m *MockIAttendance) SubmitOvertime(ctx context.Context, data payload.SubmitOvertimeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockIAttendanceMockRecorder) SubmitOvertime(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockIAttendance)(nil).SubmitOvertime), ctx, data)
}
