// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	event "attendance/model/event"
	payload "attendance/model/payload"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIPayroll is a mock of IPayroll interface.
type MockIPayroll struct {
	ctrl     *gomock.Controller
	recorder *MockIPayrollMockRecorder
}

// MockIPayrollMockRecorder is the mock recorder for MockIPayroll.
type MockIPayrollMockRecorder struct {
	mock *MockIPayroll
}

// NewMockIPayroll creates a new mock instance.
func NewMockIPayroll(ctrl *gomock.Controller) *MockIPayroll {
	mock := &MockIPayroll{ctrl: ctrl}
	mock.recorder = &MockIPayrollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayroll) EXPECT() *MockIPayrollMockRecorder {
	return m.recorder
}

// CalculatePayroll mocks base method.
func (m *MockIPayroll) CalculatePayroll(ctx context.Context, data event.CalculatePayrollJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePayroll", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculatePayroll indicates an expected call of CalculatePayroll.
func (mr *MockIPayrollMockRecorder) CalculatePayroll(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePayroll", reflect.TypeOf((*MockIPayroll)(nil).CalculatePayroll), ctx, data)
}

// CreateAttendancePeriod mocks base method.
func (m *MockIPayroll) CreateAttendancePeriod(ctx context.Context, data payload.CreateAttendancePeriodRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockIPayrollMockRecorder) CreateAttendancePeriod(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockIPayroll)(nil).CreateAttendancePeriod), ctx, data)
}

// CreatePayroll mocks base method.
func (m *MockIPayroll) CreatePayroll(ctx context.Context, periodID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayroll", ctx, periodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayroll indicates an expected call of CreatePayroll.
func (mr *MockIPayrollMockRecorder) CreatePayroll(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayroll", reflect.TypeOf((*MockIPayroll)(nil).CreatePayroll), ctx, periodID)
}

// GeneratePayslip mocks base method.
func (m *MockIPayroll) GeneratePayslip(ctx context.Context, period *db.AttendancePeriod, employeeID, payrollID uuid.UUID) (db.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayslip", ctx, period, employeeID, payrollID)
	ret0, _ := ret[0].(db.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePayslip indicates an expected call of GeneratePayslip.
func (mr *MockIPayrollMockRecorder) GeneratePayslip(ctx, period, employeeID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayslip", reflect.TypeOf((*MockIPayroll)(nil).GeneratePayslip), ctx, period, employeeID, payrollID)
}

// GetPayslip mocks base method.
func (m *MockIPayroll) GetPayslip(ctx context.Context, payrollID uuid.UUID) (*payload.PayslipDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslip", ctx, payrollID)
	ret0, _ := ret[0].(*payload.PayslipDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslip indicates an expected call of GetPayslip.
func (mr *MockIPayrollMockRecorder) GetPayslip(ctx, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslip", reflect.TypeOf((*MockIPayroll)(nil).GetPayslip), ctx, payrollID)
}

// GetResumePayslip mocks base method.
func (m *MockIPayroll) GetResumePayslip(ctx context.Context, payrollID uuid.UUID, page, perPage uint64) (*payload.PayslipSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResumePayslip", ctx, payrollID, page, perPage)
	ret0, _ := ret[0].(*payload.PayslipSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResumePayslip indicates an expected call of GetResumePayslip.
func (mr *MockIPayrollMockRecorder) GetResumePayslip(ctx, payrollID, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResumePayslip", reflect.TypeOf((*MockIPayroll)(nil).GetResumePayslip), ctx, payrollID, page, perPage)
}

// SubmitReimbursement mocks base method.
func (m *MockIPayroll) SubmitReimbursement(ctx context.Context, data payload.SubmitReimbursementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockIPayrollMockRecorder) SubmitReimbursement(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockIPayroll)(nil).SubmitReimbursement), ctx, data)
}
