// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAttendancePeriod is a mock of IAttendancePeriod interface.
type MockIAttendancePeriod struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendancePeriodMockRecorder
}

// MockIAttendancePeriodMockRecorder is the mock recorder for MockIAttendancePeriod.
type MockIAttendancePeriodMockRecorder struct {
	mock *MockIAttendancePeriod
}

// NewMockIAttendancePeriod creates a new mock instance.
func NewMockIAttendancePeriod(ctrl *gomock.Controller) *MockIAttendancePeriod {
	mock := &MockIAttendancePeriod{ctrl: ctrl}
	mock.recorder = &MockIAttendancePeriodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendancePeriod) EXPECT() *MockIAttendancePeriodMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAttendancePeriod) Create(ctx context.Context, ap *db.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAttendancePeriodMockRecorder) Create(ctx, ap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAttendancePeriod)(nil).Create), ctx, ap)
}

// GetByID mocks base method.
func (m *MockIAttendancePeriod) GetByID(ctx context.Context, ID uuid.UUID) (*db.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*db.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAttendancePeriodMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAttendancePeriod)(nil).GetByID), ctx, ID)
}

// IsOverLapping mocks base method.
func (m *MockIAttendancePeriod) IsOverLapping(ctx context.Context, startDate, endDate time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOverLapping", ctx, startDate, endDate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOverLapping indicates an expected call of IsOverLapping.
func (mr *MockIAttendancePeriodMockRecorder) IsOverLapping(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOverLapping", reflect.TypeOf((*MockIAttendancePeriod)(nil).IsOverLapping), ctx, startDate, endDate)
}
