// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIReimbursement is a mock of IReimbursement interface.
type MockIReimbursement struct {
	ctrl     *gomock.Controller
	recorder *MockIReimbursementMockRecorder
}

// MockIReimbursementMockRecorder is the mock recorder for MockIReimbursement.
type MockIReimbursementMockRecorder struct {
	mock *MockIReimbursement
}

// NewMockIReimbursement creates a new mock instance.
func NewMockIReimbursement(ctrl *gomock.Controller) *MockIReimbursement {
	mock := &MockIReimbursement{ctrl: ctrl}
	mock.recorder = &MockIReimbursementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReimbursement) EXPECT() *MockIReimbursementMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReimbursement) Create(ctx context.Context, ri *db.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ri)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReimbursementMockRecorder) Create(ctx, ri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReimbursement)(nil).Create), ctx, ri)
}

// GetByEmployeeAndPeriod mocks base method.
func (m *MockIReimbursement) GetByEmployeeAndPeriod(ctx context.Context, employeeID, attendancePeriodID uuid.UUID) ([]db.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmployeeAndPeriod", ctx, employeeID, attendancePeriodID)
	ret0, _ := ret[0].([]db.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmployeeAndPeriod indicates an expected call of GetByEmployeeAndPeriod.
func (mr *MockIReimbursementMockRecorder) GetByEmployeeAndPeriod(ctx, employeeID, attendancePeriodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmployeeAndPeriod", reflect.TypeOf((*MockIReimbursement)(nil).GetByEmployeeAndPeriod), ctx, employeeID, attendancePeriodID)
}

// SumEmployeeReimbursements mocks base method.
func (m *MockIReimbursement) SumEmployeeReimbursements(ctx context.Context, employeeID, attendancePeriodID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumEmployeeReimbursements", ctx, employeeID, attendancePeriodID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumEmployeeReimbursements indicates an expected call of SumEmployeeReimbursements.
func (mr *MockIReimbursementMockRecorder) SumEmployeeReimbursements(ctx, employeeID, attendancePeriodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumEmployeeReimbursements", reflect.TypeOf((*MockIReimbursement)(nil).SumEmployeeReimbursements), ctx, employeeID, attendancePeriodID)
}
