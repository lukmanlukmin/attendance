// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRole is a mock of IRole interface.
type MockIRole struct {
	ctrl     *gomock.Controller
	recorder *MockIRoleMockRecorder
}

// MockIRoleMockRecorder is the mock recorder for MockIRole.
type MockIRoleMockRecorder struct {
	mock *MockIRole
}

// NewMockIRole creates a new mock instance.
func NewMockIRole(ctrl *gomock.Controller) *MockIRole {
	mock := &MockIRole{ctrl: ctrl}
	mock.recorder = &MockIRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRole) EXPECT() *MockIRoleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRole) Create(ctx context.Context, role *db.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRoleMockRecorder) Create(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRole)(nil).Create), ctx, role)
}

// GetAll mocks base method.
func (m *MockIRole) GetAll(ctx context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRoleMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRole)(nil).GetAll), ctx)
}

// GetByName mocks base method.
func (m *MockIRole) GetByName(ctx context.Context, name string) (*db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIRoleMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIRole)(nil).GetByName), ctx, name)
}

// GetByUserID mocks base method.
func (m *MockIRole) GetByUserID(ctx context.Context, userID uuid.UUID) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockIRoleMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockIRole)(nil).GetByUserID), ctx, userID)
}
