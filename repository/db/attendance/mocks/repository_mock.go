// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAttendance is a mock of IAttendance interface.
type MockIAttendance struct {
	ctrl     *gomock.Controller
	recorder *MockIAttendanceMockRecorder
}

// MockIAttendanceMockRecorder is the mock recorder for MockIAttendance.
type MockIAttendanceMockRecorder struct {
	mock *MockIAttendance
}

// NewMockIAttendance creates a new mock instance.
func NewMockIAttendance(ctrl *gomock.Controller) *MockIAttendance {
	mock := &MockIAttendance{ctrl: ctrl}
	mock.recorder = &MockIAttendanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttendance) EXPECT() *MockIAttendanceMockRecorder {
	return m.recorder
}

// CountEmployeeAttendance mocks base method.
func (m *MockIAttendance) CountEmployeeAttendance(ctx context.Context, employeeID, attendancePeriodID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEmployeeAttendance", ctx, employeeID, attendancePeriodID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEmployeeAttendance indicates an expected call of CountEmployeeAttendance.
func (mr *MockIAttendanceMockRecorder) CountEmployeeAttendance(ctx, employeeID, attendancePeriodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEmployeeAttendance", reflect.TypeOf((*MockIAttendance)(nil).CountEmployeeAttendance), ctx, employeeID, attendancePeriodID)
}

// Create mocks base method.
func (m *MockIAttendance) Create(ctx context.Context, a *db.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAttendanceMockRecorder) Create(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAttendance)(nil).Create), ctx, a)
}

// IsAttendanceSubmitted mocks base method.
func (m *MockIAttendance) IsAttendanceSubmitted(ctx context.Context, employeeID uuid.UUID, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAttendanceSubmitted", ctx, employeeID, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAttendanceSubmitted indicates an expected call of IsAttendanceSubmitted.
func (mr *MockIAttendanceMockRecorder) IsAttendanceSubmitted(ctx, employeeID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAttendanceSubmitted", reflect.TypeOf((*MockIAttendance)(nil).IsAttendanceSubmitted), ctx, employeeID, date)
}
