// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIOvertime is a mock of IOvertime interface.
type MockIOvertime struct {
	ctrl     *gomock.Controller
	recorder *MockIOvertimeMockRecorder
}

// MockIOvertimeMockRecorder is the mock recorder for MockIOvertime.
type MockIOvertimeMockRecorder struct {
	mock *MockIOvertime
}

// NewMockIOvertime creates a new mock instance.
func NewMockIOvertime(ctrl *gomock.Controller) *MockIOvertime {
	mock := &MockIOvertime{ctrl: ctrl}
	mock.recorder = &MockIOvertimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOvertime) EXPECT() *MockIOvertimeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOvertime) Create(ctx context.Context, ot *db.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIOvertimeMockRecorder) Create(ctx, ot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOvertime)(nil).Create), ctx, ot)
}

// IsOvertimeSubmitted mocks base method.
func (m *MockIOvertime) IsOvertimeSubmitted(ctx context.Context, employeeID uuid.UUID, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOvertimeSubmitted", ctx, employeeID, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOvertimeSubmitted indicates an expected call of IsOvertimeSubmitted.
func (mr *MockIOvertimeMockRecorder) IsOvertimeSubmitted(ctx, employeeID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOvertimeSubmitted", reflect.TypeOf((*MockIOvertime)(nil).IsOvertimeSubmitted), ctx, employeeID, date)
}

// SumEmployeeOvertimeHours mocks base method.
func (m *MockIOvertime) SumEmployeeOvertimeHours(ctx context.Context, employeeID, attendancePeriodID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumEmployeeOvertimeHours", ctx, employeeID, attendancePeriodID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumEmployeeOvertimeHours indicates an expected call of SumEmployeeOvertimeHours.
func (mr *MockIOvertimeMockRecorder) SumEmployeeOvertimeHours(ctx, employeeID, attendancePeriodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumEmployeeOvertimeHours", reflect.TypeOf((*MockIOvertime)(nil).SumEmployeeOvertimeHours), ctx, employeeID, attendancePeriodID)
}
