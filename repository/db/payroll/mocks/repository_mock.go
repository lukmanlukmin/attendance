// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	db "attendance/model/db"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIPayroll is a mock of IPayroll interface.
type MockIPayroll struct {
	ctrl     *gomock.Controller
	recorder *MockIPayrollMockRecorder
}

// MockIPayrollMockRecorder is the mock recorder for MockIPayroll.
type MockIPayrollMockRecorder struct {
	mock *MockIPayroll
}

// NewMockIPayroll creates a new mock instance.
func NewMockIPayroll(ctrl *gomock.Controller) *MockIPayroll {
	mock := &MockIPayroll{ctrl: ctrl}
	mock.recorder = &MockIPayrollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayroll) EXPECT() *MockIPayrollMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPayroll) Create(ctx context.Context, p *db.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPayrollMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPayroll)(nil).Create), ctx, p)
}

// GetByAttendacePeriod mocks base method.
func (m *MockIPayroll) GetByAttendacePeriod(ctx context.Context, attendancePeriodID uuid.UUID, status *string) ([]db.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAttendacePeriod", ctx, attendancePeriodID, status)
	ret0, _ := ret[0].([]db.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAttendacePeriod indicates an expected call of GetByAttendacePeriod.
func (mr *MockIPayrollMockRecorder) GetByAttendacePeriod(ctx, attendancePeriodID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAttendacePeriod", reflect.TypeOf((*MockIPayroll)(nil).GetByAttendacePeriod), ctx, attendancePeriodID, status)
}

// Update mocks base method.
func (m *MockIPayroll) Update(ctx context.Context, p *db.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPayrollMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPayroll)(nil).Update), ctx, p)
}
